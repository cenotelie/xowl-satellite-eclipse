/*******************************************************************************
 * Copyright (c) 2017 Association Cénotélie (cenotelie.fr)
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

grammar FunctionalOWL2
{
	options
	{
		Axiom = "document";
		Separator = "BLANK";
	}
	terminals
	{
		NEW_LINE		-> U+000D /* CR */
						|  U+000A /* LF */
						|  U+000D U+000A /* CR LF */
						|  U+2028 /* LS */
						|  U+2029 /* PS */ ;
		WHITE_SPACE		-> U+0020 | U+0009 | U+000B | U+000C ;
		COMMENT			-> '#' (.* - (.* NEW_LINE .*)) NEW_LINE ;
		BLANK			-> NEW_LINE | WHITE_SPACE ;

		LANGTAG					-> '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)* ;

		IRIREF					-> '<' (
									. - (U+0000 .. U+0020 | [<>"{}|^`\\])
									| '\\u' [a-fA-F0-9]{4}
									| '\\U' [a-fA-F0-9]{8}
								)* '>' ;

		fragment PLX			-> '%' [a-fA-F0-9] [a-fA-F0-9]
								|  '\\' ( [_~.!$&'()*+,;=/?#@%] | '-') ;
		fragment PN_CHARS_BASE	-> [A-Za-z] | U+00C0 .. U+00D6 | U+00D8 .. U+00F6 | U+00F8 .. U+02FF | U+0370 .. U+037D
											| U+037F .. U+1FFF | U+200C .. U+200D | U+2070 .. U+218F | U+2C00 .. U+2FEF
											| U+3001 .. U+D7FF | U+F900 .. U+FDCF | U+FDF0 .. U+FFFD
											| U+10000 .. U+EFFFF ;
		fragment PN_CHARS_U		-> PN_CHARS_BASE | '_' ;
		fragment PN_CHARS		-> PN_CHARS_U | '-' | [0-9] | U+00B7 | U+0300 .. U+036F | U+203F .. U+2040;
		fragment PN_PREFIX		-> PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)? ;
		fragment PN_LOCAL		-> (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))? ;

		PNAME_NS				-> PN_PREFIX? ':' ;
		PNAME_LN				-> PNAME_NS PN_LOCAL ;
		BLANK_NODE_LABEL		-> '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)? ;

		INTEGER					-> [0-9]+ ;
		STRING					-> '"' (
									. - (U+0022 | U+005C | U+000A | U+000D)
									| '\\' ([tbnrf"'] | '\\')
									| '\\u' [a-fA-F0-9]{4}
									| '\\U' [a-fA-F0-9]{8}
									)* '"' ;
		PREFIX		-> 'Prefix';
		ONTOLOGY	-> 'Ontology';
		IMPORT		-> 'Import';
		LP		-> '(';
		RP		-> ')';
	}
	rules
	{
		document        -> prefixes ontology ;
		prefixes		-> prefix* ;
		prefix			-> PREFIX! LP! PNAME_NS '='! IRIREF RP! ;
		ontology		-> ONTOLOGY! LP! ontologyIRI imports annotations elements RP! ;
		ontologyIRI		-> iri? iri? ;
		iri				-> IRIREF^ | PNAME_LN^ ;
		imports			-> import* ;
		import			-> IMPORT! LP! iri^ RP! ;
		elements		-> element* ;
		element			-> axiom^ ;

		annotations			-> annotation* ;
		annotation			-> 'Annotation'! LP! annotations annotationProperty annotationValue RP! ;
		annotationSubject	-> entity^ | anonymousIndividual^ ;
		annotationProperty	-> entity^ ;
		annotationValue		-> entity^ | anonymousIndividual^ | literal^ ;

		entity						-> iri^ ;
		individual					-> anonymousIndividual^ | namedIndividual^ ;
		namedIndividual				-> entity^ ;
		anonymousIndividual			-> BLANK_NODE_LABEL^ ;
		literal						-> literalTyped^ | literalString^ | literalLang^ ;
		literalTyped				-> STRING '^^'! iri ;
		literalString				-> STRING ;
		literalLang					-> STRING LANGTAG ;

		expObjectProperty			-> entity^ | expInverseObjectProperty^ ;
		expObjectPropertyChain		-> 'ObjectPropertyChain'! LP! expObjectProperty expObjectProperty+ RP! ;
		expInverseObjectProperty	-> 'ObjectInverseOf'! LP! expObjectProperty RP! ;
		expDataProperty				-> entity^ ;
		expDatarange				-> entity^
									|  expDataIntersectionOf^
									|  expDataUnionOf^
									|  expDataComplementOf^
									|  expDataOneOf^
									|  expDatatypeRestriction^ ;
		expDataIntersectionOf		-> 'DataIntersectionOf'! LP! expDatarange expDatarange+ RP! ;
		expDataUnionOf				-> 'DataUnionOf'! LP! expDatarange expDatarange+ RP! ;
		expDataComplementOf			-> 'DataComplementOf'! LP! expDatarange RP! ;
		expDataOneOf				-> 'DataOneOf'! LP! literal+ RP! ;
		expDatatypeRestriction		-> 'DatatypeRestriction'! LP! entity expRestriction+ RP! ;
		expRestriction				-> entity literal ;
		expClass					-> entity^
									|  expObjectInterfactionOf^
									|  expObjectUnionOf^
									|  expObjectComplementOf^
									|  expObjectOneOf^
									|  expObjectSomeValuesFrom^
									|  expObjectAllValuesFrom^
									|  expObjectHasValue^
									|  expObjectHasSelf^
									|  expObjectMinCardinality^
									|  expObjectMaxCardinality^
									|  expObjectExactCardinality^
									|  expDataSomeValuesFrom^
									|  expDataAllValuesFrom^
									|  expDataHasValue^
									|  expDataMinCardinality^
									|  expDataMaxCardinality^
									|  expDataExactCardinality^ ;
		expObjectInterfactionOf		-> 'ObjectIntersectionOf'! LP! expClass expClass+ RP! ;
		expObjectUnionOf			-> 'ObjectUnionOf'! LP! expClass expClass+ RP! ;
		expObjectComplementOf		-> 'ObjectComplementOf'! LP! expClass RP! ;
		expObjectOneOf				-> 'ObjectOneOf'! LP! individual+ RP! ;
		expObjectSomeValuesFrom		-> 'ObjectSomeValuesFrom'! LP! expObjectProperty expClass RP! ;
		expObjectAllValuesFrom		-> 'ObjectAllValuesFrom'! LP! expObjectProperty expClass RP! ;
		expObjectHasValue			-> 'ObjectHasValue'! LP! expObjectProperty individual RP! ;
		expObjectHasSelf			-> 'ObjectHasSelf'! LP! expObjectProperty RP! ;
		expObjectMinCardinality		-> 'ObjectMinCardinality'! LP! INTEGER expObjectProperty expClass? RP! ;
		expObjectMaxCardinality		-> 'ObjectMaxCardinality'! LP! INTEGER expObjectProperty expClass? RP! ;
		expObjectExactCardinality	-> 'ObjectExactCardinality'! LP! INTEGER expObjectProperty expClass? RP! ;
		expDataSomeValuesFrom		-> 'DataSomeValuesFrom'! LP! expDataProperty+ expDatarange RP! ;
		expDataAllValuesFrom		-> 'DataAllValuesFrom'! LP! expDataProperty+ expDatarange RP! ;
		expDataHasValue				-> 'DataHasValue'! LP! expDataProperty literal RP! ;
		expDataMinCardinality		-> 'DataMinCardinality'! LP! INTEGER expDataProperty expDatarange? RP! ;
		expDataMaxCardinality		-> 'DataMaxCardinality'! LP! INTEGER expDataProperty expDatarange? RP! ;
		expDataExactCardinality		-> 'DataExactCardinality'! LP! INTEGER expDataProperty expDatarange? RP! ;


		axiom						-> axiomDeclaration^
									|  axiomClass^
									|  axiomObjectProperty^
									|  axiomDataProperty^
									|  axiomDatatype^
									|  axiomHasKey^
									|  axiomAssertion^
									|  axiomAnnotation^ ;

		axiomDeclaration			-> 'Declaration'! LP! annotations 'Class' LP! entity RP! RP!
									|  'Declaration'! LP! annotations 'Datatype' LP! entity RP! RP!
									|  'Declaration'! LP! annotations 'ObjectProperty' LP! entity RP! RP!
									|  'Declaration'! LP! annotations 'DataProperty' LP! entity RP! RP!
									|  'Declaration'! LP! annotations 'AnnotationProperty' LP! entity RP! RP!
									|  'Declaration'! LP! annotations 'NamedIndividual' LP! entity RP! RP! ;

		axiomClass					-> axiomSubClassOf^
									|  axiomEquivalentClasses^
									|  axiomDisjointClasses^
									|  axiomDisjointUnion^ ;
		axiomSubClassOf				-> 'SubClassOf'! LP! annotations expClass expClass RP! ;
		axiomEquivalentClasses		-> 'EquivalentClasses'! LP! annotations expClass expClass+ RP! ;
		axiomDisjointClasses		-> 'DisjointClasses'! LP! annotations expClass expClass+ RP! ;
		axiomDisjointUnion			-> 'DisjointUnion'! LP! annotations entity expClass expClass+ RP! ;

		axiomObjectProperty			-> axiomSubOjectPropertyOf^
									|  axiomEquivalentObjectProperties^
									|  axiomDisjointObjectProperties^
									|  axiomInverseObjectProperties^
									|  axiomObjectPropertyDomain^
									|  axiomObjectPropertyRange^
									|  axiomFunctionalObjectProperty^
									|  axiomInverseFunctionalObjectProperty^
									|  axiomReflexiveObjectProperty^
									|  axiomIrreflexiveObjectProperty^
									|  axiomSymmetricObjectProperty^
									|  axiomAsymmetricObjectProperty^
									|  axiomTransitiveObjectProperty^ ;
		axiomSubOjectPropertyOf		-> 'SubObjectPropertyOf'! LP! annotations (expObjectProperty | expObjectPropertyChain) expObjectProperty RP! ;
		axiomEquivalentObjectProperties	-> 'EquivalentObjectProperties'! LP! annotations expObjectProperty expObjectProperty+ RP! ;
		axiomDisjointObjectProperties	-> 'DisjointObjectProperties'! LP! annotations expObjectProperty expObjectProperty+ RP! ;
		axiomInverseObjectProperties	-> 'InverseObjectProperties'! LP! annotations expObjectProperty expObjectProperty RP! ;
		axiomObjectPropertyDomain		-> 'ObjectPropertyDomain'! LP! annotations expObjectProperty expClass RP! ;
		axiomObjectPropertyRange		-> 'ObjectPropertyRange'! LP! annotations expObjectProperty expClass RP! ;
		axiomFunctionalObjectProperty	-> 'FunctionalObjectProperty'! LP! annotations expObjectProperty RP! ;
		axiomInverseFunctionalObjectProperty -> 'InverseFunctionalObjectProperty'! LP! annotations expObjectProperty RP! ;
		axiomReflexiveObjectProperty	-> 'ReflexiveObjectProperty'! LP! annotations expObjectProperty RP! ;
		axiomIrreflexiveObjectProperty	-> 'IrreflexiveObjectProperty'! LP! annotations expObjectProperty RP! ;
		axiomSymmetricObjectProperty	-> 'SymmetricObjectProperty'! LP! annotations expObjectProperty RP! ;
		axiomAsymmetricObjectProperty	-> 'AsymmetricObjectProperty'! LP! annotations expObjectProperty RP! ;
		axiomTransitiveObjectProperty	-> 'TransitiveObjectProperty'! LP! annotations expObjectProperty RP! ;

		axiomDataProperty			-> axiomSubDataPropertyOf^
									|  axiomEquivalentDataProperties^
									|  axiomDisjointDataProperties^
									|  axiomDataPropertyDomain^
									|  axiomDataPropertyRange^
									|  axiomFunctionalDataProperty^ ;
		axiomSubDataPropertyOf			-> 'SubDataPropertyOf'! LP! annotations expDataProperty expDataProperty RP! ;
		axiomEquivalentDataProperties	-> 'EquivalentDataProperties'! LP! annotations expDataProperty expDataProperty+ RP! ;
		axiomDisjointDataProperties		-> 'DisjointDataProperties'! LP! annotations expDataProperty expDataProperty+ RP! ;
		axiomDataPropertyDomain			-> 'DataPropertyDomain'! LP! annotations expDataProperty expClass RP! ;
		axiomDataPropertyRange			-> 'DataPropertyRange'! LP! annotations expDataProperty expDatarange RP! ;
		axiomFunctionalDataProperty		-> 'FunctionalDataProperty'! LP! annotations expDataProperty RP! ;

		axiomDatatype					-> 'DatatypeDefinition'! LP! annotations entity expDatarange RP! ;

		axiomHasKey						-> 'HasKey'! LP! annotations expClass axiomHasKeyObjectProperties axiomHasKeyDataProperties RP! ;
		axiomHasKeyObjectProperties		-> LP! expObjectProperty* RP! ;
		axiomHasKeyDataProperties		-> LP! expDataProperty* RP! ;

		axiomAssertion					-> axiomSameIndividual^
										|  axiomDifferentIndividuals^
										|  axiomClassAssertion^
										|  axiomObjectPropertyAssertion^
										|  axiomNegativeObjectPropertyAssertion^
										|  axiomDataPropertyAssertion^
										|  axiomNegativeDataPropertyAssertion^ ;
		axiomSameIndividual					-> 'SameIndividual'! LP! annotations individual individual+ RP! ;
		axiomDifferentIndividuals			-> 'DifferentIndividuals'! LP! annotations individual individual+ RP! ;
		axiomClassAssertion					-> 'ClassAssertion'! LP! annotations expClass individual RP! ;
		axiomObjectPropertyAssertion		-> 'ObjectPropertyAssertion'! LP! annotations expObjectProperty individual individual RP! ;
		axiomNegativeObjectPropertyAssertion-> 'NegativeObjectPropertyAssertion'! LP! annotations expObjectProperty individual individual RP! ;
		axiomDataPropertyAssertion			-> 'DataPropertyAssertion'! LP! annotations expDataProperty individual literal RP! ;
		axiomNegativeDataPropertyAssertion	-> 'NegativeDataPropertyAssertion'! LP! annotations expDataProperty individual literal RP! ;

		axiomAnnotation					-> axiomAnnotationAssertion
										|  axiomSubAnnotationPropertyOf
										|  axiomAnnotationPropertyDomain
										|  axiomAnnotationPropertyRange ;
		axiomAnnotationAssertion		-> 'AnnotationAssertion'! LP! annotations annotationProperty annotationSubject annotationValue RP! ;
		axiomSubAnnotationPropertyOf	-> 'SubAnnotationPropertyOf'! LP! annotations annotationProperty annotationProperty RP! ;
		axiomAnnotationPropertyDomain	-> 'AnnotationPropertyDomain'! LP! annotations annotationProperty entity RP! ;
		axiomAnnotationPropertyRange	-> 'AnnotationPropertyRange'! LP! annotations annotationProperty entity RP! ;
	}
}
