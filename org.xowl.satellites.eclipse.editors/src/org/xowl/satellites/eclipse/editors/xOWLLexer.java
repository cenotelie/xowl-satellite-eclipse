/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.0.0.0
 */

package org.xowl.satellites.eclipse.editors;

import fr.cenotelie.hime.redist.Symbol;
import fr.cenotelie.hime.redist.lexer.Automaton;
import fr.cenotelie.hime.redist.lexer.ContextSensitiveLexer;

import java.io.InputStreamReader;

/**
 * Represents a lexer
 */
class xOWLLexer extends ContextSensitiveLexer {
    /**
     * The automaton for this lexer
     */
    private static final Automaton commonAutomaton = Automaton.find(xOWLLexer.class, "xOWLLexer.bin");

    /**
     * Contains the constant IDs for the terminals for this lexer
     */
    public static class ID {
        /**
         * The unique identifier for terminal CLJ_DEREF
         */
        public static final int CLJ_DEREF = 0x0039;
        /**
         * The unique identifier for terminal CLJ_SYMBOL
         */
        public static final int CLJ_SYMBOL = 0x0025;
        /**
         * The unique identifier for terminal CLJ_LP
         */
        public static final int CLJ_LP = 0x0030;
        /**
         * The unique identifier for terminal OWL2_LP
         */
        public static final int OWL2_LP = 0x0016;
        /**
         * The unique identifier for terminal CLJ_RP
         */
        public static final int CLJ_RP = 0x0031;
        /**
         * The unique identifier for terminal OWL2_RP
         */
        public static final int OWL2_RP = 0x0017;
        /**
         * The unique identifier for terminal OWL2_PREFIX_MAP
         */
        public static final int OWL2_PREFIX_MAP = 0x0018;
        /**
         * The unique identifier for terminal CLJ_METADATA
         */
        public static final int CLJ_METADATA = 0x003A;
        /**
         * The unique identifier for terminal XOWL_OPAQUE_EXP
         */
        public static final int XOWL_OPAQUE_EXP = 0x001A;
        /**
         * The unique identifier for terminal PNAME_NS
         */
        public static final int PNAME_NS = 0x0011;
        /**
         * The unique identifier for terminal LITERAL_ARGUMENT
         */
        public static final int LITERAL_ARGUMENT = 0x002F;
        /**
         * The unique identifier for terminal CLJ_LB
         */
        public static final int CLJ_LB = 0x0032;
        /**
         * The unique identifier for terminal CLJ_RB
         */
        public static final int CLJ_RB = 0x0033;
        /**
         * The unique identifier for terminal CLJ_LC
         */
        public static final int CLJ_LC = 0x0034;
        /**
         * The unique identifier for terminal CLJ_RC
         */
        public static final int CLJ_RC = 0x0035;
        /**
         * The unique identifier for terminal CLJ_DISPATCH
         */
        public static final int CLJ_DISPATCH = 0x0036;
        /**
         * The unique identifier for terminal CLJ_SET_SEPARATOR
         */
        public static final int CLJ_SET_SEPARATOR = 0x0037;
        /**
         * The unique identifier for terminal CLJ_QUOTE
         */
        public static final int CLJ_QUOTE = 0x0038;
        /**
         * The unique identifier for terminal CLJ_SYNTAX_QUOTE
         */
        public static final int CLJ_SYNTAX_QUOTE = 0x003C;
        /**
         * The unique identifier for terminal CLJ_UNQUOTE
         */
        public static final int CLJ_UNQUOTE = 0x003D;
        /**
         * The unique identifier for terminal LITERAL_FLOAT
         */
        public static final int LITERAL_FLOAT = 0x002E;
        /**
         * The unique identifier for terminal LITERAL_INTEGER
         */
        public static final int LITERAL_INTEGER = 0x002C;
        /**
         * The unique identifier for terminal OWL2_INTEGER
         */
        public static final int OWL2_INTEGER = 0x0014;
        /**
         * The unique identifier for terminal BLANK
         */
        public static final int BLANK = 0x0008;
        /**
         * The unique identifier for terminal LANGTAG
         */
        public static final int LANGTAG = 0x000F;
        /**
         * The unique identifier for terminal IRIREF
         */
        public static final int IRIREF = 0x0010;
        /**
         * The unique identifier for terminal LITERAL_STRING
         */
        public static final int LITERAL_STRING = 0x0027;
        /**
         * The unique identifier for terminal OWL2_STRING
         */
        public static final int OWL2_STRING = 0x0015;
        /**
         * The unique identifier for terminal OWL2_LITERAL_TYPE
         */
        public static final int OWL2_LITERAL_TYPE = 0x0019;
        /**
         * The unique identifier for terminal XOWL_QVAR
         */
        public static final int XOWL_QVAR = 0x001B;
        /**
         * The unique identifier for terminal PNAME_LN
         */
        public static final int PNAME_LN = 0x0012;
        /**
         * The unique identifier for terminal CLJ_KEYWORD
         */
        public static final int CLJ_KEYWORD = 0x0026;
        /**
         * The unique identifier for terminal LITERAL_CHAR
         */
        public static final int LITERAL_CHAR = 0x0028;
        /**
         * The unique identifier for terminal CLJ_IGNORE
         */
        public static final int CLJ_IGNORE = 0x003B;
        /**
         * The unique identifier for terminal CLJ_CONDITIONAL
         */
        public static final int CLJ_CONDITIONAL = 0x003F;
        /**
         * The unique identifier for terminal COMMENT
         */
        public static final int COMMENT = 0x0007;
        /**
         * The unique identifier for terminal CLJ_UNQUOTE_SPLICE
         */
        public static final int CLJ_UNQUOTE_SPLICE = 0x003E;
        /**
         * The unique identifier for terminal BLANK_NODE_LABEL
         */
        public static final int BLANK_NODE_LABEL = 0x0013;
        /**
         * The unique identifier for terminal RULE_ELEMENT_NOT
         */
        public static final int RULE_ELEMENT_NOT = 0x0021;
        /**
         * The unique identifier for terminal LITERAL_NIL
         */
        public static final int LITERAL_NIL = 0x0029;
        /**
         * The unique identifier for terminal LITERAL_RATIO
         */
        public static final int LITERAL_RATIO = 0x002D;
        /**
         * The unique identifier for terminal RULE_BLOCK_RULE
         */
        public static final int RULE_BLOCK_RULE = 0x001C;
        /**
         * The unique identifier for terminal RULE_ELEMENT_META
         */
        public static final int RULE_ELEMENT_META = 0x0020;
        /**
         * The unique identifier for terminal LITERAL_TRUE
         */
        public static final int LITERAL_TRUE = 0x002A;
        /**
         * The unique identifier for terminal RULE_BLOCK_GUARD
         */
        public static final int RULE_BLOCK_GUARD = 0x001F;
        /**
         * The unique identifier for terminal LITERAL_FALSE
         */
        public static final int LITERAL_FALSE = 0x002B;
        /**
         * The unique identifier for terminal RULE_BLOCK_ANTECEDENTS
         */
        public static final int RULE_BLOCK_ANTECEDENTS = 0x001D;
        /**
         * The unique identifier for terminal RULE_BLOCK_CONSEQUENTS
         */
        public static final int RULE_BLOCK_CONSEQUENTS = 0x001E;
    }

    /**
     * Contains the constant IDs for the contexts for this lexer
     */
    public static class Context {
        /**
         * The unique identifier for the default context
         */
        public static final int DEFAULT = 0;
        /**
         * The unique identifier for context owl2
         */
        public static final int owl2 = 0x0001;
        /**
         * The unique identifier for context xowl
         */
        public static final int xowl = 0x0002;
        /**
         * The unique identifier for context clojure
         */
        public static final int clojure = 0x0003;
    }

    /**
     * The collection of terminals matched by this lexer
     * <p>
     * The terminals are in an order consistent with the automaton,
     * so that terminal indices in the automaton can be used to retrieve the terminals in this table
     */
    private static final Symbol[] terminals = {
            new Symbol(0x0001, "Îµ"),
            new Symbol(0x0002, "$"),
            new Symbol(0x0039, "CLJ_DEREF"),
            new Symbol(0x0025, "CLJ_SYMBOL"),
            new Symbol(0x0030, "CLJ_LP"),
            new Symbol(0x0016, "OWL2_LP"),
            new Symbol(0x0031, "CLJ_RP"),
            new Symbol(0x0017, "OWL2_RP"),
            new Symbol(0x0018, "OWL2_PREFIX_MAP"),
            new Symbol(0x003A, "CLJ_METADATA"),
            new Symbol(0x001A, "XOWL_OPAQUE_EXP"),
            new Symbol(0x0011, "PNAME_NS"),
            new Symbol(0x002F, "LITERAL_ARGUMENT"),
            new Symbol(0x0032, "CLJ_LB"),
            new Symbol(0x0033, "CLJ_RB"),
            new Symbol(0x0034, "CLJ_LC"),
            new Symbol(0x0035, "CLJ_RC"),
            new Symbol(0x0036, "CLJ_DISPATCH"),
            new Symbol(0x0037, "CLJ_SET_SEPARATOR"),
            new Symbol(0x0038, "CLJ_QUOTE"),
            new Symbol(0x003C, "CLJ_SYNTAX_QUOTE"),
            new Symbol(0x003D, "CLJ_UNQUOTE"),
            new Symbol(0x002E, "LITERAL_FLOAT"),
            new Symbol(0x002C, "LITERAL_INTEGER"),
            new Symbol(0x0014, "OWL2_INTEGER"),
            new Symbol(0x0008, "BLANK"),
            new Symbol(0x000F, "LANGTAG"),
            new Symbol(0x0010, "IRIREF"),
            new Symbol(0x0027, "LITERAL_STRING"),
            new Symbol(0x0015, "OWL2_STRING"),
            new Symbol(0x0019, "OWL2_LITERAL_TYPE"),
            new Symbol(0x001B, "XOWL_QVAR"),
            new Symbol(0x0012, "PNAME_LN"),
            new Symbol(0x0026, "CLJ_KEYWORD"),
            new Symbol(0x0028, "LITERAL_CHAR"),
            new Symbol(0x003B, "CLJ_IGNORE"),
            new Symbol(0x003F, "CLJ_CONDITIONAL"),
            new Symbol(0x0007, "COMMENT"),
            new Symbol(0x003E, "CLJ_UNQUOTE_SPLICE"),
            new Symbol(0x0013, "BLANK_NODE_LABEL"),
            new Symbol(0x0021, "RULE_ELEMENT_NOT"),
            new Symbol(0x0029, "LITERAL_NIL"),
            new Symbol(0x002D, "LITERAL_RATIO"),
            new Symbol(0x001C, "RULE_BLOCK_RULE"),
            new Symbol(0x0020, "RULE_ELEMENT_META"),
            new Symbol(0x002A, "LITERAL_TRUE"),
            new Symbol(0x00E9, "Class"),
            new Symbol(0x001F, "RULE_BLOCK_GUARD"),
            new Symbol(0x002B, "LITERAL_FALSE"),
            new Symbol(0x00BF, "Prefix"),
            new Symbol(0x00C2, "Import"),
            new Symbol(0x010E, "HasKey"),
            new Symbol(0x00C0, "Ontology"),
            new Symbol(0x00EA, "Datatype"),
            new Symbol(0x00CE, "DataOneOf"),
            new Symbol(0x00C5, "Annotation"),
            new Symbol(0x00EF, "SubClassOf"),
            new Symbol(0x001D, "RULE_BLOCK_ANTECEDENTS"),
            new Symbol(0x001E, "RULE_BLOCK_CONSEQUENTS"),
            new Symbol(0x00D7, "ObjectOneOf"),
            new Symbol(0x00CB, "DataUnionOf"),
            new Symbol(0x00E8, "Declaration"),
            new Symbol(0x00E4, "DataHasValue"),
            new Symbol(0x00EC, "DataProperty"),
            new Symbol(0x00D4, "ObjectUnionOf"),
            new Symbol(0x00DC, "ObjectHasSelf"),
            new Symbol(0x00F4, "DisjointUnion"),
            new Symbol(0x0115, "ClassAssertion"),
            new Symbol(0x00EB, "ObjectProperty"),
            new Symbol(0x00DB, "ObjectHasValue"),
            new Symbol(0x0111, "SameIndividual"),
            new Symbol(0x00EE, "NamedIndividual"),
            new Symbol(0x00C8, "ObjectInverseOf"),
            new Symbol(0x00F2, "DisjointClasses"),
            new Symbol(0x00CD, "DataComplementOf"),
            new Symbol(0x00E2, "DataAllValuesFrom"),
            new Symbol(0x010B, "DataPropertyRange"),
            new Symbol(0x0105, "SubDataPropertyOf"),
            new Symbol(0x00F0, "EquivalentClasses"),
            new Symbol(0x00ED, "AnnotationProperty"),
            new Symbol(0x00D6, "ObjectComplementOf"),
            new Symbol(0x00C9, "DataIntersectionOf"),
            new Symbol(0x010D, "DatatypeDefinition"),
            new Symbol(0x00E0, "DataSomeValuesFrom"),
            new Symbol(0x00E5, "DataMinCardinality"),
            new Symbol(0x00E6, "DataMaxCardinality"),
            new Symbol(0x010A, "DataPropertyDomain"),
            new Symbol(0x012D, "FunctionDefinition"),
            new Symbol(0x011A, "AnnotationAssertion"),
            new Symbol(0x00C6, "ObjectPropertyChain"),
            new Symbol(0x00FD, "ObjectPropertyRange"),
            new Symbol(0x00DA, "ObjectAllValuesFrom"),
            new Symbol(0x00D0, "DatatypeRestriction"),
            new Symbol(0x00F6, "SubObjectPropertyOf"),
            new Symbol(0x00FC, "ObjectPropertyDomain"),
            new Symbol(0x00D2, "ObjectIntersectionOf"),
            new Symbol(0x00D9, "ObjectSomeValuesFrom"),
            new Symbol(0x00DD, "ObjectMinCardinality"),
            new Symbol(0x00DE, "ObjectMaxCardinality"),
            new Symbol(0x00E7, "DataExactCardinality"),
            new Symbol(0x0113, "DifferentIndividuals"),
            new Symbol(0x0118, "DataPropertyAssertion"),
            new Symbol(0x00DF, "ObjectExactCardinality"),
            new Symbol(0x0108, "DisjointDataProperties"),
            new Symbol(0x010C, "FunctionalDataProperty"),
            new Symbol(0x0100, "ReflexiveObjectProperty"),
            new Symbol(0x011D, "AnnotationPropertyRange"),
            new Symbol(0x0116, "ObjectPropertyAssertion"),
            new Symbol(0x00FB, "InverseObjectProperties"),
            new Symbol(0x011B, "SubAnnotationPropertyOf"),
            new Symbol(0x0102, "SymmetricObjectProperty"),
            new Symbol(0x011C, "AnnotationPropertyDomain"),
            new Symbol(0x0103, "AsymmetricObjectProperty"),
            new Symbol(0x00F9, "DisjointObjectProperties"),
            new Symbol(0x0106, "EquivalentDataProperties"),
            new Symbol(0x00FE, "FunctionalObjectProperty"),
            new Symbol(0x0104, "TransitiveObjectProperty"),
            new Symbol(0x0101, "IrreflexiveObjectProperty"),
            new Symbol(0x00F7, "EquivalentObjectProperties"),
            new Symbol(0x0119, "NegativeDataPropertyAssertion"),
            new Symbol(0x0117, "NegativeObjectPropertyAssertion"),
            new Symbol(0x00FF, "InverseFunctionalObjectProperty")};

    /**
     * Initializes a new instance of the lexer
     *
     * @param input The lexer's input
     */
    public xOWLLexer(String input) {
        super(commonAutomaton, terminals, 0x0008, input);
    }

    /**
     * Initializes a new instance of the lexer
     *
     * @param input The lexer's input
     */
    public xOWLLexer(InputStreamReader input) {
        super(commonAutomaton, terminals, 0x0008, input);
    }
}
